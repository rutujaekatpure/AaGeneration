// Aa code produced by llvm2aa (version 2.0)
$module [main] 
 $in ()
 $out (ret_val__ : i32)
 $is 
{
$branchblock [body] {
//begin: basic-block bb_0
$storage iNsTr_0_alloc : i32
$storage iNsTr_1_alloc : i32
$storage iNsTr_2_alloc : i32
iNsTr_0 := @(iNsTr_0_alloc)
iNsTr_1 := @(iNsTr_1_alloc)
iNsTr_2 := @(iNsTr_2_alloc)
->(iNsTr_0) := ( $bitcast (i32 ) _b00000000000000000000000000000000 ) 
->(iNsTr_1) := ( $bitcast (i32 ) _b00000000000000000000000000000101 ) 
->(iNsTr_2) := ( $bitcast (i32 ) _b00000000000000000000000000001010 ) 
// load 
iNsTr_6 := ->(iNsTr_1) 
// load 
iNsTr_7 := ->(iNsTr_2) 
// compare instruction
iNsTr_8 := ( ($bitcast ( $int<32>) iNsTr_6) <   ($bitcast ( $int<32>) iNsTr_7 ) )
$if iNsTr_8 $then  $place [bb_0_bb_1] $else $place [bb_0_bb_2] $endif 
//begin: basic-block bb_1
$merge bb_0_bb_1
$endmerge
// load 
iNsTr_10 := ->(iNsTr_2) 
->(iNsTr_0) := iNsTr_10
$place [bb_1_bb_5]
//begin: basic-block bb_2
$merge bb_0_bb_2
$endmerge
// load 
iNsTr_13 := ->(iNsTr_1) 
// load 
iNsTr_14 := ->(iNsTr_2) 
// compare instruction
iNsTr_15 := (iNsTr_13 == iNsTr_14 )
$if iNsTr_15 $then  $place [bb_2_bb_3] $else $place [bb_2_bb_4] $endif 
//begin: basic-block bb_3
$merge bb_2_bb_3
$endmerge
// load 
iNsTr_19 := ->(iNsTr_1) 
// load 
iNsTr_20 := ->(iNsTr_2) 
iNsTr_21 := (iNsTr_19 + iNsTr_20)
->(iNsTr_0) := iNsTr_21
$place [bb_3_bb_5]
//begin: basic-block bb_4
$merge bb_2_bb_4
$endmerge
// load 
iNsTr_24 := ->(iNsTr_1) 
->(iNsTr_0) := iNsTr_24
$place [bb_4_bb_5]
//begin: basic-block bb_5
$merge bb_1_bb_5 bb_3_bb_5 bb_4_bb_5
$endmerge
// load 
ret_val__ := ->(iNsTr_0) 
$place [return__]
$merge return__ $endmerge
}
}
